{"meta":{"title":"Turtle","subtitle":"turtle | 廖亮的博客","description":"Live with your ideas!","author":"廖亮","url":"http://blog.turtletl.com"},"pages":[{"title":"bookmark","date":"2016-10-13T14:20:09.000Z","updated":"2016-10-13T14:21:10.215Z","comments":true,"path":"bookmark/index.html","permalink":"http://blog.turtletl.com/bookmark/index.html","excerpt":"","text":""},{"title":"about","date":"2016-10-13T14:20:00.000Z","updated":"2016-10-20T14:50:44.589Z","comments":true,"path":"about/index.html","permalink":"http://blog.turtletl.com/about/index.html","excerpt":"","text":"概况 别名：turtle 公司：江西安纳斯江西有限公司 职位：项目经理 邮箱：turtleliangz@gmail.com 博客：http://blog.turtletl.com csdn：http://blog.csdn.cn/turtleo github: http://github.com/turtleliangzi gitbook：http://book.turtletl.com 教育 学校：南昌大学 专业：计算机科学与技术 综合技能"},{"title":"open-source","date":"2016-10-13T14:16:25.000Z","updated":"2016-10-13T14:16:52.891Z","comments":true,"path":"open-source/index.html","permalink":"http://blog.turtletl.com/open-source/index.html","excerpt":"","text":""}],"posts":[{"title":"ubuntu中安装android sdk","slug":"ubuntu中安装android-sdk","date":"2016-10-20T06:32:58.000Z","updated":"2016-10-20T06:33:35.932Z","comments":true,"path":"2016/10/20/ubuntu中安装android-sdk/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/ubuntu中安装android-sdk/","excerpt":"本文阐述的是如何在ubuntu中安装android sdk 环境","text":"本文阐述的是如何在ubuntu中安装android sdk 环境 一、安装python-software-properties1apt-get update &amp;&amp; apt-get install -y -q python-software-properties software-properties-common &amp;&amp; apt-get clean 二、安装oracle java from PPA12345add-apt-repository ppa:webupd8team/java -yecho oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selectionsapt-get update &amp;&amp; apt-get -y install oracle-java7-installer &amp;&amp; apt-get clean 三、ANDROID STUFF1dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install -y --force-yes expect ant wget libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1 qemu-kvm kmod &amp;&amp; apt-get clean 四、安装Android SDK1cd /opt &amp;&amp; wget --output-document=android-sdk.tgz --quiet http://dl.google.com/android/android-sdk_r24.0.2-linux.tgz &amp;&amp; tar xzf android-sdk.tgz &amp;&amp; rm -f android-sdk.tgz 五、配置环境在/etc/profile文件末尾加上如下代码 12export ANDROID_HOME=/opt/android-sdk-linuxexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools:$&#123;ANDROID_HOME&#125;/platform-tools 1source /etc/profile 六、安装sdk elements新建脚本/opt/tools/android-accept-licenses.sh12345678910111213#!/usr/bin/expect -fset timeout 1800set cmd [lindex $argv 0]set licenses [lindex $argv 1]spawn &#123;*&#125;$cmdexpect &#123;&quot;Do you accept the license &apos;*&apos;*&quot; &#123; exp_send &quot;y\\r&quot; exp_continue&#125;eof 1chmod 755 /opt/tools/android-accept-licenses.sh 在/etc/profile文件末尾加上如下代码 1export PATH=$PATH:/opt/tools 1echo ANDROID_HOME=&quot;$&#123;ANDROID_HOME&#125;&quot; &gt;&gt; /etc/environment 运行脚本并更新 1/opt/tools/android-accept-licenses.sh 1android update sdk --all --no-ui --filter platform-tools,tools,build-tools23,android-23,addon-google_apis_x86-google-23,extra-android-support,extra-android-m2repository,extra-google-m2repository,sys-img-x86-android-23 --proxy-host mirrors.neusoft.edu.cn --proxy-port 80 -s","categories":[],"tags":[],"keywords":[]},{"title":"用dockerfile构建基于ubuntu的lnmp环境的镜像","slug":"用dockerfile构建基于ubuntu的lnmp环境的镜像","date":"2016-10-20T06:32:45.000Z","updated":"2016-10-20T06:33:58.219Z","comments":true,"path":"2016/10/20/用dockerfile构建基于ubuntu的lnmp环境的镜像/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/用dockerfile构建基于ubuntu的lnmp环境的镜像/","excerpt":"本文主要讲述的是如何用dockerfile构建lnmp环境的镜像，前提默认你已安装好docker","text":"本文主要讲述的是如何用dockerfile构建lnmp环境的镜像，前提默认你已安装好docker 一、新建Dockerfile文件12345678910111213141516171819202122232425262728FROM ubuntu:16.04MAINTAINER turtle &quot;turtle@anasit.com&quot;RUN \\ apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0xcbcb082a1bb943db &amp;&amp; \\ apt-get update &amp;&amp; \\ apt-get install -y mariadb-server mariadb-common &amp;&amp; \\ apt-get install -y php &amp;&amp; \\ apt-get install -y nginx &amp;&amp; \\ apt-get install -y vim # 配置nginxCopy ./default /etc/nginx/sites-available/default# 添加启动脚本ADD ./start.sh /start.shRUN chmod 755 /start.shCMD /start.sh &amp;&amp; tail -f# Expose ports.EXPOSE 3306EXPOSE 80 start.sh文件1234567## start nginxservice nginx start## start mysqlservice mysql start## start php7.0-fpmservice php7.0-fpm start default文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586# You should look at the following URL&apos;s in order to grasp a solid understanding# of Nginx configuration files in order to fully unleash the power of Nginx.# http://wiki.nginx.org/Pitfalls# http://wiki.nginx.org/QuickStart# http://wiki.nginx.org/Configuration## Generally, you will want to move this file somewhere, and start with a clean### You should look at the following URL&apos;s in order to grasp a solid understanding# of Nginx configuration files in order to fully unleash the power of Nginx.# http://wiki.nginx.org/Pitfalls# http://wiki.nginx.org/QuickStart# http://wiki.nginx.org/Configuration## Generally, you will want to move this file somewhere, and start with a clean# file but keep this around for reference. Or just disable in sites-enabled.## Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.### Default server configuration#server &#123; listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don&apos;t use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.php index.html index.htm index.nginx-debian.html; server_name _; location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; &#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \\.php$ &#123; include snippets/fastcgi-php.conf; # With php7.0-cgi alone:# fastcgi_pass 127.0.0.1:9000; # With php7.0-fpm: fastcgi_pass unix:/run/php/php7.0-fpm.sock; &#125;# deny access to .htaccess files, if Apache&apos;s document root# concurs with nginx&apos;s one##location ~ /\\.ht &#123;# deny all;#&#125;&#125;# Virtual Host configuration for example.com## You can move that to a different file under sites-available/ and symlink that# to sites-enabled/ to enable it.##server &#123;# listen 80;# listen [::]:80;## server_name example.com;## root /var/www/example.com;# index index.html;## location / &#123;# try_files $uri $uri/ =404;# &#125;#&#125; 二、build Dockerfile文件1docker build -t turtlell/lnmp:1.0 . 三、运行镜像1docker run -id -p 80:80 -v /var/www/html:/var/www/html turtlell/lnmp 四、访问localhost访问localhost，运行成功，则说明搭建成功 详情请访问github","categories":[],"tags":[],"keywords":[]},{"title":"docker创建ubuntu的lnmp镜像","slug":"docker创建ubuntu的lnmp镜像","date":"2016-10-20T06:32:16.000Z","updated":"2016-10-20T06:32:37.209Z","comments":true,"path":"2016/10/20/docker创建ubuntu的lnmp镜像/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/docker创建ubuntu的lnmp镜像/","excerpt":"本文讲述的是如何在原有的ubuntu镜像上搭建lnmp开发环境，并生成新的镜像。","text":"本文讲述的是如何在原有的ubuntu镜像上搭建lnmp开发环境，并生成新的镜像。 一、下载ubuntu:16.04镜像1docker pull ubuntu:16.04 二、运行ubuntu镜像1docker run -i -t ubuntu:16.04 bash 三、在ubuntu镜像中搭建lnmp环境更新ubuntu系统1apt-get update 安装php7.01apt-get install php 安装nginx1apt-get install nginx 安装mysql1apt-get install mysql* 启动nginx、mysql、php7.0-fpm服务123service nginx startservice mysql startservice php7.0-fpm start 配置nginx123456789index index.php index.html index.htm index.nginx-debian.html;location ~ \\.php$ &#123; include snippets/fastcgi-php.conf; # # # With php7.0-cgi alone: # fastcgi_pass 127.0.0.1:9000; # With php7.0-fpm: fastcgi_pass unix:/run/php/php7.0-fpm.sock;&#125; 退出镜像1exit 四、生成新的镜像查看之前编辑的镜像id1docker ps -l 保存之前编辑的镜像到一个新镜像 1docker commit -m &quot;提交信息&quot; --author &quot;作者&quot; 镜像id 新镜像名 五、运行新的镜像1docker run -d -p 80:80 -v /var/www/html:/var/www/html turtlell/lnmp:1.2 /sbin/init 其中 -d 是以daemon模式运行-p 80:80是将本地的80端口映射到容器的80端口-v /var/www/html:/var/www/html 是将本地的/var/www/html目录挂载到容器的/var/www/html目录上，可以在本地的/var/www/html中编写代码 进入新镜像，启动nginx、mysql、php7.0-fpm服务 123docker psdocker exec -it 进程id bash 访问localhost 五、将新的镜像发布到线上123docker logindocker pull 镜像名:版本号","categories":[],"tags":[],"keywords":[]},{"title":"vim安装youcompleteme自动补全插件","slug":"vim安装youcompleteme自动补全插件","date":"2016-10-20T06:31:11.000Z","updated":"2016-10-20T06:31:29.502Z","comments":true,"path":"2016/10/20/vim安装youcompleteme自动补全插件/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/vim安装youcompleteme自动补全插件/","excerpt":"本文介绍的是如何在vim中安装youcompleteme自动补全插件","text":"本文介绍的是如何在vim中安装youcompleteme自动补全插件 一、安装youcompleteme打开文件~/.vimrc添加下面一行代码1Bundle &apos;Valloric/YouCompleteMe&apos; 保存退出，打开一个vim新文件，执行以下代码1:BundleInstall 进行安装vim插件 二、编译youcompleteme插件安装完后，编译youcompleteme进入文件夹~/.vim/bundle/YouCompleteMe/1./install.sh --clang-completer 更多语言的补全请参照youcompleteme github 三、配置youcompleteme插件1vim ~/.vimrc 添加以下代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&quot;YouCompleteMe智能补全工具let g:ycm_global_ycm_extra_conf = &apos;~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py&apos;&quot; 不显示开启vim时检查ycm_extra_conf文件的信息let g:ycm_confirm_extra_conf = 0&quot; 开启基于tag的补全，可以在这之后添加需要的标签路径let g:ycm_collect_identifiers_from_tags_files = 1&quot; 开启语义补全let g:ycm_seed_identifiers_with_syntax = 1&quot;注释和字符串中的文字也会被收入补全let g:ycm_collect_identifiers_from_comments_and_strings = 0&quot; 输入第 2 个字符开始补全let g:ycm_min_num_of_chars_for_completion= 2&quot; 禁止缓存匹配项,每次都重新生成匹配项let g:ycm_cache_omnifunc=0&quot;在注释输入中也能补全let g:ycm_complete_in_comments = 1&quot;在字符串输入中也能补全let g:ycm_complete_in_strings = 1&quot;定义快捷健补全let g:ycm_key_list_select_completion = [&apos;&lt;c-n&gt;&apos;, &apos;&lt;Down&gt;&apos;]let g:ycm_key_list_previous_completion = [&apos;&lt;c-p&gt;&apos;, &apos;&lt;Up&gt;&apos;]&quot; 设置在下面几种格式的文件上屏蔽ycmlet g:ycm_filetype_blacklist = &#123; \\ &apos;tagbar&apos; : 1, \\ &apos;qf&apos; : 1, \\ &apos;notes&apos; : 1, \\ &apos;markdown&apos; : 1, \\ &apos;unite&apos; : 1, \\ &apos;text&apos; : 1, \\ &apos;vimwiki&apos; : 1, \\ &apos;pandoc&apos; : 1, \\ &apos;infolog&apos; : 1, \\ &apos;mail&apos; : 1 \\&#125;&quot;设置关健字触发补全let g:ycm_semantic_triggers = &#123; \\ &apos;c&apos; : [&apos;-&gt;&apos;, &apos;.&apos;, &apos; &apos;, &apos;(&apos;, &apos;[&apos;, &apos;&amp;&apos;&apos;], \\ &apos;objc&apos; : [&apos;-&gt;&apos;, &apos;.&apos;, &apos;re!\\[[_a-zA-Z]+\\w*\\s&apos;, &apos;re!^\\s*[^\\W\\d]\\w*\\s&apos;, \\ &apos;re!\\[.*\\]\\s&apos;], \\ &apos;ocaml&apos; : [&apos;.&apos;, &apos;#&apos;], \\ &apos;cpp,objcpp&apos; : [&apos;-&gt;&apos;, &apos;.&apos;, &apos;::&apos;], \\ &apos;perl&apos; : [&apos;-&gt;&apos;], \\ &apos;php&apos; : [&apos;-&gt;&apos;, &apos;::&apos;], \\ &apos;cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go&apos; : [&apos;.&apos;], \\ &apos;ruby&apos; : [&apos;.&apos;, &apos;::&apos;], \\ &apos;lua&apos; : [&apos;.&apos;, &apos;:&apos;], \\ &apos;erlang&apos; : [&apos;:&apos;], \\ ])&apos;]&#125;let g:ycm_cache_omnifunc = 1let g:ycm_use_ultisnips_completer = 1&quot;定义函数跟踪快捷健nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt; 四、补全js代码安装tern_for_vim插件1vim ~/.vimrc 1Plugin &apos;marijnh/tern_for_vim&apos; 新建一个vim文件，执行以下代码1:PligunInstall 配置tern_for_vim12cd ~/.vim/bundle/tern_for_vimnpm install 在项目中补全js代码在项目根目录下添加文件.tern_project12345678910111213141516171819&#123; &quot;libs&quot;: [ &quot;browser&quot;, &quot;underscore&quot;, &quot;jquery&quot; ], &quot;plugins&quot;: &#123; &#125;&#125; 在plugin中可以加入node或者angular等关键字，加载该库的补全功能。如下：12345&quot;plugins&quot;: &#123; &quot;node&quot;: &#123;&#125;&#125; 保存退出，然后打开项目中的js文件就可以使用代码补全了 “","categories":[],"tags":[],"keywords":[]},{"title":"archlinux实现wifi和有线联网","slug":"archlinux实现wifi和有线联网","date":"2016-10-20T06:30:29.000Z","updated":"2016-10-20T06:30:49.162Z","comments":true,"path":"2016/10/20/archlinux实现wifi和有线联网/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/archlinux实现wifi和有线联网/","excerpt":"本文实现的是如何在archlinux系统中实现简单的wifi及有线联网","text":"本文实现的是如何在archlinux系统中实现简单的wifi及有线联网 无线联网复制文件/etc/netctl/examples/wireless-wpa到/etc/netctl下1cp /etc/netctl/examples/wireless-wpa ../ 配置无线信息12345678910111213141516Description=&apos;A simple WPA encrypted wireless connection&apos;Interface=wlp8s0b1Connection=wirelessSecurity=wpaIP=dhcpESSID=&apos;ANAS-PUBLIC-TP&apos;# Prepend hexadecimal keys with \\&quot;# If your key starts with &quot;, write it as &apos;&quot;&quot;&lt;key&gt;&quot;&apos;# See also: the section on special quoting rules in netctl.profile(5)Key=&apos;anas7777&apos;# Uncomment this if your ssid is hidden#Hidden=yes# Set a priority for automatic profile selection#Priority=10 保存退出，启动无线网1systemctl start wireless-wpa 开机启动1systemctl enable wireless-wpa 有线联网复制文件/etc/netctl/examples/ethernet-dhcp到/etc/netctl下1cp /etc/netctl/examples/ethernet-dhcp ../ 配置有线信息1234567891011Description=&apos;A basic dhcp ethernet connection&apos;Interface=enp7s0Connection=ethernetIP=dhcp#DHCPClient=dhcpcd#DHCPReleaseOnStop=no## for DHCPv6#IP6=dhcp#DHCP6Client=dhclient## for IPv6 autoconfiguration#IP6=stateless 配置完毕，保存退出 启动有线联网 1systemctl start ethernet-dhcp 开机启动 1systemctl enable ethernet-dhcp “‘“","categories":[],"tags":[],"keywords":[]},{"title":"Archlinux下安装docker","slug":"Archlinux下安装docker","date":"2016-10-20T06:29:53.000Z","updated":"2016-10-20T06:30:12.745Z","comments":true,"path":"2016/10/20/Archlinux下安装docker/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/Archlinux下安装docker/","excerpt":"本文介绍如何在archlinux下安装docker，及解决下载镜像慢的问题。","text":"本文介绍如何在archlinux下安装docker，及解决下载镜像慢的问题。 一、安装docker安装docker1pacman -S docker 启动docker 1systemctl start docker 开机启动docker 1systemctl enable docker 关掉开机启动docker 1systemclt disable docker 详情请参考docker官方文档 二、解决下载镜像慢的问题在国内下载docker镜像，非常缓慢，通常的做法是将源换成中科大的源即可。在 /etc/docker/daemon.json123&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125; 然后重启docker即可详情参考中科大docker镜像源文档","categories":[],"tags":[],"keywords":[]},{"title":"centos7 下安装scrapy","slug":"centos7-下安装scrapy","date":"2016-10-20T06:29:01.000Z","updated":"2016-10-20T06:29:24.375Z","comments":true,"path":"2016/10/20/centos7-下安装scrapy/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/centos7-下安装scrapy/","excerpt":"由于centos6下需要升级python版本，这里简单起见直接使用centos7 ，默认centos7使用的python包管理器是easy_install －－－当然也可以通过easy_install安装pip。所以使用如下命令搞定scrapy的安装：","text":"由于centos6下需要升级python版本，这里简单起见直接使用centos7 ，默认centos7使用的python包管理器是easy_install －－－当然也可以通过easy_install安装pip。所以使用如下命令搞定scrapy的安装：easy_install scrapy不过安装过程可能不会像上面那么顺利，就为其还依赖一些rpm包，所以在安装前需要安装如下包： yum install libxslt-devel libffi libffi-devel python-devel gcc openssl openssl-devel如果不事先安装以上包，可能会遇到如下的相关报错和问题 报错1： ERROR: /bin/sh: xslt-config: command not found make sure the development packages of libxml2 and libxslt are installed 解决方法yum -y install libxslt-devel 。 报错2： Using build configuration of libxslt 1.1.28Building against libxml2/libxslt in the following directory: /usr/lib64src/lxml/lxml.etree.c:85:20: fatal error: Python.h: No such file or directory #include “Python.h” ^compilation terminated.Compile failed: command ‘gcc’ failed with exit status 1error: Setup script exited with error: command ‘gcc’ failed with exit status 1缺少python-devel包，因为Python.h文件是在python-devel包中的。直接yum安装该包即可。 报错3： removing: _configtest.c _configtest.oc/_cffi_backend.c:13:17: fatal error: ffi.h: No such file or directory include ffi.hcompilation terminated.error: Setup script exited with error: command ‘gcc’ failed with exit statuscentos下的报错示还是很好的，yum list｜grep ffi相关的包，发现执行如下安装yum -y install libffi libffi-devel 。","categories":[],"tags":[],"keywords":[]},{"title":"一款awesome下好看的主题插件","slug":"一款awesome下好看的主题插件","date":"2016-10-20T06:27:59.000Z","updated":"2016-10-20T06:28:14.942Z","comments":true,"path":"2016/10/20/一款awesome下好看的主题插件/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/一款awesome下好看的主题插件/","excerpt":"","text":"awesome-copycatsgithub地址 awesome-copycats","categories":[],"tags":[],"keywords":[]},{"title":"vim下一些好用插件","slug":"vim下一些好用插件","date":"2016-10-20T06:27:18.000Z","updated":"2016-10-20T06:27:36.152Z","comments":true,"path":"2016/10/20/vim下一些好用插件/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/vim下一些好用插件/","excerpt":"Pathogen插件管理器 github Pathogen NerdTreevim 目录，可以展示该目录下的目录树， github NerdTree","text":"Pathogen插件管理器 github Pathogen NerdTreevim 目录，可以展示该目录下的目录树， github NerdTree TagBar清楚的展示一个程序的内部结构。快捷键按钮F8。github TagBar UltiSnipsgithub UltiSnip vim-commentary代码注释，gcc单行代码注释，gc[number]多行代码注释。github vim-commentary syntastic保存文件是可以检查语法，github syntastic ctrlp搜索该目录下的文件，ctrl+p显示该目录下的相关文件，下面命令行可以搜索文件。github ctrlp AutoClose自动补全{、(、[，github AutoClose vim-surround使用相应快捷键可以快速包装代码，cs”‘命令可以将光标所在行的文本中的”替换成’，相关命令类似cs’、cs”，更多命令参考github vim-surround neocomplcache关键字补全、路径名补全、tag补全。github neocomplcache neocomplcache-clang解决clang_complete和neocomplcache的冲突。github neocomplcache-clang TagHighlight根据生成的Tag文件，高亮类、变量、函数和关键字。github TagHighlight multiple_cursors块文本编辑，快捷键ctrl+n。github multiple_cursors …持续更新中’”])}","categories":[],"tags":[],"keywords":[]},{"title":"在Laravel5.2中使用dingo+JWT+Swagger","slug":"在Laravel5-2中使用dingo-JWT-Swagger","date":"2016-10-20T06:26:34.000Z","updated":"2016-10-20T06:26:58.792Z","comments":true,"path":"2016/10/20/在Laravel5-2中使用dingo-JWT-Swagger/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/在Laravel5-2中使用dingo-JWT-Swagger/","excerpt":"项目github地址laravel-dingo 结合dingo api、JWT、swagger等众多目前流行的restful api工具，致力于将laravel5.2打造成更加适合API开发者开发API的工作环境，并将路由分割到各个控制器中，避免众多路由混杂到一个routes.php文件中，便于日常维护!","text":"项目github地址laravel-dingo 结合dingo api、JWT、swagger等众多目前流行的restful api工具，致力于将laravel5.2打造成更加适合API开发者开发API的工作环境，并将路由分割到各个控制器中，避免众多路由混杂到一个routes.php文件中，便于日常维护! 使用 Note:在使用该框架之前，先要搭建好web服务器环境，本框架在nginx+php+mysql环境下能测试通过！ 下载git clone https://github.com/turtleliangzi/laravel-dingo.git 修改目录权限 chmod -R 777 storage chmod -R bootstrap/cache 测试数据准备本框架使用的数据库、用户名、密码分别为ucenter、root、ucenter，用户可以在.env文件中修改为自己的数据库、用户名和密码。 123DB_DATABASE=ucenterDB_USERNAME=rootDB_PASSWORD=ucenter 生成测试表 1php artisan migrate 生成users表测试数据 1php artisan tinker 进入交互界面 123&gt;&gt;&gt; namespace App=&gt; null&gt;&gt;&gt; factory(User::class, 60)-&gt;create() lessons表测试数据可以按照同样方法生成。 Dingo ApiDingo Api是一个强大的laravel API编写工具, 使用它，可以更加规范和方便地编写API，节约大量开发时间。Dingo Api 配置 本框架已经安装并配置好了Dingo Api，在使用过程中，你可以修改.env文件中的以下配置 API_STANDARDS_TREE=vnd API_PREFIX=api API_VERSION=v1 API_DEBUG=true 具体配置详情，请参考dingo api configuration 使用 在app/Http/routes.php文件中注册以下路由 123456789/* * Include Routes */$root_dir = &apos;/var/www/dingo/app/Api/&apos;;$api = app(&apos;Dingo\\Api\\Routing\\Router&apos;);// V1require_once $root_dir.&apos;V1/routes.php&apos;; 在app目录下新建Api/V1文件夹，在V1文件夹下新建routes.php文件，写入以下内容 123456789101112$api-&gt;version(&apos;v1&apos;, function ($api) &#123; $api-&gt;group([&apos;namespace&apos; =&gt; &apos;App\\Api\\V1\\Controllers&apos;], function($api) &#123; /* * include controller routes */ $dir = &apos;/var/www/dingo/app/Api/V1/Controllers/&apos;; // User Controller Routes require_once $dir.&apos;User/routes.php&apos;; &#125;); &#125;; 在V1文件夹下新建Controllers文件夹，在Controllers文件夹下新建BaseController.php文件 12345678910&lt;?phpnamespace App\\Api\\V1\\Controllers;use App\\Http\\Controllers\\Controller;use Dingo\\Api\\Routing\\Helpers;class BaseController extends Controller &#123; use Helpers;&#125; 在Controllers文件夹下新建User文件夹，在User文件夹下新建routes.php文件 123456/* * User Controller Routes * */$api-&gt;get(&apos;/users/all&apos;, &apos;User\\UserController@show&apos;); 至此，路由注册完毕，过程中，将路由分割到了各个控制器中，目地是为了更方便维护。 在User文件夹下新建UserController.php文件，继承BaseController 123456789101112&lt;?phpnamespace App\\Api\\V1\\Controllers\\User;use App\\Api\\V1\\Controllers\\BaseController;use App\\User;class UserController extends BaseController &#123; public function show() &#123; $users = User::all(); return $users; &#125;&#125; 在浏览器打开www.example.com/api/users/all，如果能够得到想要的，则路由注册成功。 JWTJWT（JSON WEB TOKEN）一种API验证方式，详情请见JWT Note：在本框架中已经安装并配置好了JWT，可以直接使用。 使用 在app/Api/V1/Controllers下新建Auth文件夹，在Auth文件夹下面新建AuthController.php文件 1234567891011121314151617181920212223242526272829&lt;?phpnamespace App\\Api\\V1\\Controllers\\Auth;use App\\Api\\V1\\Controllers\\BaseController;use Illuminate\\Http\\Request;use JWTAuth;use Tymon\\JWTAuth\\Exceptions\\JWTException;use App\\User;class AuthController extends BaseController &#123; public function authenticate(Request $request) &#123; // grab credentials from the request $credentials = $request-&gt;only(&apos;email&apos;, &apos;password&apos;); try &#123; // attempt to verify the credentials and create a token for the user if (! $token = JWTAuth::attempt($credentials)) &#123; return response()-&gt;json([&apos;error&apos; =&gt; &apos;invalid_credentials&apos;], 401); &#125; &#125; catch (JWTException $e) &#123; // something went wrong whilst attempting to encode the token return response()-&gt;json([&apos;error&apos; =&gt; &apos;could_not_create_token&apos;], 500); &#125; // all good so return the token return response()-&gt;json(compact(&apos;token&apos;)); &#125;&#125; 注册路由，在Auth文件夹下新建routes.php文件 123456/* * Auth Controller Routes * */$api-&gt;post(&apos;/auth/login&apos;, &apos;Auth\\AuthController@authenticate&apos;); 修改app/Api/V1/routes.php文件，引入Auth/routes.php文件 1234567891011121314$api-&gt;version(&apos;v1&apos;, function ($api) &#123; $api-&gt;group([&apos;namespace&apos; =&gt; &apos;App\\Api\\V1\\Controllers&apos;], function($api) &#123; /* * include controller routes */ $dir = &apos;/var/www/dingo/app/Api/V1/Controllers/&apos;; // Auth Controller Rotues require_once $dir.&apos;Auth/routes.php&apos;; // User Controller Routes require_once $dir.&apos;User/routes.php&apos;; &#125;); &#125;; 访问链接www.example.com/api/auth/login，登陆成功可以返回一串token值。可以结合register方法，先注册一个测试用户。 在AuthController.php中加入 123456789101112public function register(Request $request) &#123; $newUser = [ &apos;name&apos; =&gt; $request-&gt;get(&apos;name&apos;), &apos;email&apos; =&gt; $request-&gt;get(&apos;email&apos;), &apos;password&apos; =&gt; bcrypt($request-&gt;get(&apos;password&apos;)), ]; $user = User::create($newUser); $token = JWTAuth::fromUser($user); return response()-&gt;json(compact(&apos;token&apos;)); &#125; 修改该目录下的routes.php，注册/auth/register路由 12$api-&gt;post(&apos;/auth/login&apos;, &apos;Auth\\AuthController@authenticate&apos;);$api-&gt;post(&apos;/auth/register&apos;, &apos;Auth\\AuthController@register&apos;); 可以在一个路由或路由组中使用jwt.auth中间件，通过token来验证获取资源的权限。 123456$api-&gt;group([&apos;middleware&apos; =&gt; &apos;jwt.auth&apos;], function($api) &#123; $dir = &apos;/var/www/dingo/app/Api/V1/Controllers/&apos;; // User Controller Routes require_once $dir.&apos;User/routes.php&apos;;&#125;; 当访问www.example.com/api/user/all时，需要在加上Header Authorization: Bearer {yourtokenhere}。 SwaggerSwagger是一个非常强大的API文档工具， 在Laravel中使用Swagger可以自动生成Api文档，详情请见swaggervel Note：本框架中已经安装并配置好了swagger，可以直接使用。 例如： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182use Swagger\\Annotations as SWG;/** * @SWG\\Swagger( * @SWG\\Info( * title=&quot;Dingo Api&quot;, * version=&quot;1.0.0&quot; * ), * @SWG\\Tag(name=&quot;Auth&quot;, description=&quot;验证模块&quot;), * @SWG\\Tag(name=&quot;Users&quot;, description=&quot;用户模块&quot;), * @SWG\\Tag(name=&quot;Lessons&quot;, description=&quot;教程模块&quot;), * schemes=&#123;&quot;http&quot;&#125;, * host=&quot;ucenter.turtletl.com:81&quot;, * basePath=&quot;/api&quot; * ) */class UserController extends BaseController &#123; /** * @SWG\\Get( * path=&quot;/users/all&quot;, * summary=&quot;显示所有用户&quot;, * tags=&#123;&quot;Users&quot;&#125;, * @SWG\\Parameter(name=&quot;Authorization&quot;, in=&quot;header&quot;, required=true, description=&quot;用户凭证&quot;, type=&quot;string&quot;), * @SWG\\Response( * response=200, * description=&quot;all users&quot; * ), * @SWG\\Response( * response=&quot;default&quot;, * description=&quot;an &quot;&quot;unexpected&quot;&quot; error&quot; * ) * ) */ public function show() &#123; $users = User::all(); $users = User::paginate(25); return $this-&gt;response-&gt;paginator($users, new UserTransformer)-&gt;setStatusCode(200); //return $this-&gt;response-&gt;collection($users, new UserTransformer); &#125; /** * @SWG\\Get( * path=&quot;/users/one&quot;, * summary=&quot;获取当前用户&quot;, * tags=&#123;&quot;Users&quot;&#125;, * @SWG\\Parameter(name=&quot;Authorization&quot;, in=&quot;header&quot;, required=true, description=&quot;用户凭证&quot;, type=&quot;string&quot;), * @SWG\\Response( * response=200, * description=&quot;one user&quot; * ), * @SWG\\Response( * response=&quot;default&quot;, * description=&quot;an &quot;&quot;unexpected&quot;&quot; error&quot; * ) * ) */ public function getAuthenticatedUser() &#123; try &#123; if (! $user = JWTAuth::parseToken()-&gt;authenticate()) &#123; return response()-&gt;json([&apos;user_not_found&apos;], 404); &#125; &#125; catch (TokenExpiredException $e) &#123; return response()-&gt;json([&apos;token_expired&apos;], $e-&gt;getStatusCode()); &#125; catch (TokenInvalidException $e) &#123; return response()-&gt;json([&apos;token_invalid&apos;], $e-&gt;getStatusCode()); &#125; catch (JWTException $e) &#123; return response()-&gt;json([&apos;token_absent&apos;], $e-&gt;getStatusCode()); &#125; // the token is valid and we have found the user via the sub claim return response()-&gt;json(compact(&apos;user&apos;)); //return $this-&gt;response-&gt;item(compact(&apos;user&apos;), new UserTransformer); &#125; Swagger-php 2.0 较Swagger-php 1.0版本有一定的改动，详情请见swagger-php2.0 访问www.example.com/api-docs查看API文档 访问www.example.com/docs查看JSON文档 详情请参考本框架测试环境下的API文档laravel-dingo}","categories":[],"tags":[],"keywords":[]},{"title":"云计算技术图谱","slug":"云计算技术图谱","date":"2016-10-20T06:25:20.000Z","updated":"2016-10-20T06:26:09.715Z","comments":true,"path":"2016/10/20/云计算技术图谱/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/云计算技术图谱/","excerpt":"云计算图谱，想学习的可以参考下","text":"云计算图谱，想学习的可以参考下 运维 DevOps- 持续交付 - 持续集成 部署- 蓝绿部署 - 灰度发布 - 金丝雀发布 - Canary 部署 - PHOENIX 部署 - AWS CloudFormation 配置- Chef - Puppet - Ansibie - AWS OpsWorks 开发 流程- Scrum - Crystal - FDD 语言- Java - Python - Go - Javascript - PHP - Ruby 架构 分布式系统- ##### 消息队列 - ZeroMQ - ActiveMQ - RabbitMQ - AWS SQS - ##### 事件/消息驱动 - AWS SWS - AWS Lambda - AKKA - ##### RPC - Thrift - Protocol Microservices RESTFull CAP 理论 应用 前端应用- ##### Web 应用 - Javascript/Ajax - HTML/CSS - 桌面虚拟化 - 移动应用 - IoT 后端应用- 高性能计算 - 渲染 行业应用- CRM - ERP - 生物科学 基础架构 计算- ##### 自动扩展 - AWS Autoscaling - OpenStack/Hoo! - ##### 负载均衡 - AWS ELB - HAProxy - Nginx - ##### 虚拟化 - Hypervisor - Xen - KVM - Hyper-V - ##### 容器 - Docker - CoreOS - UnixLXC - #### 网络 - TCP/IP - VLANs - DNS/CDN - HTTP/HTTPS 协议 存储- 网络存储 - AWS EBS - NFS v4 - Ceph - Apache CloudStack - 对象存储 - AWS S3 - OpenStack Swift - 块存储 - SAN - AWS EBS - RAID 概念 - 灾难恢复 - 文件系统 - ext4 - XFS 平台 操作系统- Linux - Redhat/Centos - Ubuntu Debian SUSE Windows Server 数据管理 SQL- AWS RDS - MySQL - PostgreSQL NoSQL- DynamoDB - MongoDB - Cassandra 缓存- Momcached - Redis - AWS Elastics Cache 检索- Solr - Elasticssearch - AWS Elastics Search 大数据 语言、工具- R - Python - Java - Scala MapReduce- Hadoop - HDFS - HBase - Hive - Spark 数据流- AWS Kinesis - Storm 机器学习- Spark ML - scikit learn - AWS ML 身份认证- SAML - OpenID - Microsoft AD - AWS IAM 管理- 日志 - AWS CloudTrail - Logstash - Fluentd - 监控 - ZABBIX - OBSERVIUM - INICGA - AWS CloudWatch 安全 Firewall DDOS iptables WAF IDS/IPS VPN OpenStack 核心功能- 计算：NOVA - 网络：NEUTRON - 对象存储：SWIFT - 块存储：CINDER - 认证：KEYSTONE - 镜像：GLANCE 可选功能- 仪表板：Horizon - 数据库：Trove - 大数据：Sahara - 编排：Heat - 监控：Ceilometer - 消息服务：Zaqar - 裸机配置：Ironic - 密钥管理：Barbican - DNS服务：Designate - Governance Service：Congress - Shared Filesystems：Manila - Container Service：Magnum - Workflow Service：Mistral - Application Catalog：Murano","categories":[],"tags":[],"keywords":[]},{"title":"在laravel框架中使用mongodb数据库","slug":"在laravel框架中使用mongodb数据库","date":"2016-10-20T06:24:04.000Z","updated":"2016-10-20T06:24:43.992Z","comments":true,"path":"2016/10/20/在laravel框架中使用mongodb数据库/","link":"","permalink":"http://blog.turtletl.com/2016/10/20/在laravel框架中使用mongodb数据库/","excerpt":"在laravel框架中使用mongodb，前提是你已经安装好了mongodb及mongodb的php扩展。 没有安装的，具体可以参照博客http://blog.csdn.net/turtleo/article/details/50119459","text":"在laravel框架中使用mongodb，前提是你已经安装好了mongodb及mongodb的php扩展。 没有安装的，具体可以参照博客http://blog.csdn.net/turtleo/article/details/50119459 1、使用composer在laravel框架中引入mongodb 1composer require jenssegers/mongodb 2、编辑config/app.php文件在providers出添加如下代码 1Jenssegers\\Mongodb\\MongodbServiceProvider::class, 在aliases出添加如下代码1&apos;Mongo&apos; =&gt; Jenssegers\\Mongodb\\MongodbServiceProvider::class, 3、配置config/database.php1&apos;default&apos; =&gt; env(&apos;DB_CONNECTIOND&apos;, &apos;mongodb&apos;) 12345678910&apos;mongodb&apos; =&gt; [ &apos;driver&apos; =&gt; &apos;mongodb&apos;, &apos;host&apos; =&gt; &apos;localhost&apos;, &apos;port&apos; =&gt; 27017, &apos;database&apos; =&gt; &apos;test&apos;, &apos;username&apos; =&gt; &apos;&apos;, &apos;password&apos; =&gt; &apos;&apos;, ], 4、测试配置是否正确新建一个model文件1234567891011121314151617&lt;?phpnamespace App;use Mongo;use DB; class Mongodb extends Mongo &#123; protected $collection = &apos;users&apos;; protected $connection = &apos;test&apos;; public static function test() &#123; $users = DB::collection(&apos;users&apos;)-&gt;get(); var_dump($users); &#125; &#125; 新建一个controller文件12345678910111213141516&lt;?phpnamespace App\\Http\\Controllers;use App\\Http\\Controllers\\Controller;use App\\Mongodb;class MongodbController extends Controller&#123; protected function test() &#123; Mongodb::test(); &#125; &#125;","categories":[],"tags":[],"keywords":[]},{"title":"Centos7下安装mongodb数据库","slug":"Centos7下安装mongodb数据库","date":"2016-10-17T10:31:55.000Z","updated":"2016-10-17T10:33:07.937Z","comments":true,"path":"2016/10/17/Centos7下安装mongodb数据库/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/Centos7下安装mongodb数据库/","excerpt":"一、安装mongodb在/etc/yum.repos.d目录下添加mongodb源新建mongodb-org-3.0.repo文件","text":"一、安装mongodb在/etc/yum.repos.d目录下添加mongodb源新建mongodb-org-3.0.repo文件12345[mongodb-org-3.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/gpgcheck=0enabled=1 保存退出yum命令安装mongodb-org1yum install mongodb-org 在根目录下新建/data/db目录1mkdir -p /data/db 启动mongod1systemctl start mongod 停止mongod1systemctl stop mongod 重启mongod1systemctl restart mongod 二、安装php-mongodb扩展下载php-mongodb扩展1wget http://pecl.php.net/get/mongo-1.6.12.tgz 解压1tar xvzf mongo-1.6.12 编译安装1234cd mongo-1.6.12phpize./configure --with-php-config=/usr/bin/php-configmake &amp;&amp; make install 在安装过程中可能会报以下错误1/var/tmp/mongo/contrib/php-ssl.h:33:25: error: openssl/evp.h: No such file or directory 需要安装openssl-devel1yum install openssl-devel 在php.ini文件中添加extension=mongo.so1extension=mongo.so 重启php-fpm或服务器1systemctl restart php-fpm","categories":[],"tags":[],"keywords":[]},{"title":"Centos7添加epel源并升级php","slug":"Centos7添加epel源并升级php","date":"2016-10-17T10:30:44.000Z","updated":"2016-10-17T10:31:05.767Z","comments":true,"path":"2016/10/17/Centos7添加epel源并升级php/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/Centos7添加epel源并升级php/","excerpt":"最近在阿里云上入手了一台centos7的服务器，在搭建环境过程中发现php的版本是5.4，且是最新的。可现在php都已经到7了，经查询发现centos为保持稳定性并没用太多的更新源，使得一些软件都过于老。因此为了使用到最新的php版本，我们得在centos中添加一些较新的源。目前在centos系统中较流行的源有epel和remi。接下来我们会添加这两种源来升级php版本。","text":"最近在阿里云上入手了一台centos7的服务器，在搭建环境过程中发现php的版本是5.4，且是最新的。可现在php都已经到7了，经查询发现centos为保持稳定性并没用太多的更新源，使得一些软件都过于老。因此为了使用到最新的php版本，我们得在centos中添加一些较新的源。目前在centos系统中较流行的源有epel和remi。接下来我们会添加这两种源来升级php版本。 ##一、安装源1rpm -Uvh http://ftp.iij.ad.jp/pub/linux/fedora/epel/7/x86_64/e/epel-release-7-5.noarch.rpm 1rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm ##二、确认需要安装的php版本1yum list --enablerepo=remi --enablerepo=remi-php56 | grep php ##三、卸载已经安装的php版本如果系统中已经安装了较低的php版本，请先卸载掉1yun remove php* ##四、安装较新的php版本1yum install --enablerepo=remi --enablerepo=remi-php56 php php-opcache php-pecl-apcu php-devel php-mbstring php-mcrypt php-mysqlnd php-phpunit-PHPUnit php-pecl-xdebug php-pecl-xhprof php-pdo php-pear php-fpm php-cli php-xml php-bcmath php-process php-gd php-common ##查看php版本1php -v","categories":[],"tags":[],"keywords":[]},{"title":"利用redis存储session，解决登录同步问题","slug":"利用redis存储session，解决登录同步问题","date":"2016-10-17T10:29:09.000Z","updated":"2016-10-17T10:29:33.660Z","comments":true,"path":"2016/10/17/利用redis存储session，解决登录同步问题/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/利用redis存储session，解决登录同步问题/","excerpt":"##一、php session存储方式在php中，存储session可以使用files user memcached redis，对于小型单一网站可以直接使用files的方式存储session。使用缓存数据库存储session的好处是较之文件存储方式，在大用户量的情况下速度更快、性能更优。而且如果做分布式系统的话，使用数据库存储是很好的方式。所以，如果使用数据库存储session，memecached和redis到底那种更好。","text":"##一、php session存储方式在php中，存储session可以使用files user memcached redis，对于小型单一网站可以直接使用files的方式存储session。使用缓存数据库存储session的好处是较之文件存储方式，在大用户量的情况下速度更快、性能更优。而且如果做分布式系统的话，使用数据库存储是很好的方式。所以，如果使用数据库存储session，memecached和redis到底那种更好。 ##二、redis和memcached的比较1、redis不仅仅支持简单的k/v类型的数据，同时还提供list、set、zset、hash等数据结构的存储;2、redis支持数据的备份，即master-slave模式的数据备份;3、redis支持数据的持久化，可以将内存中的数据保存到磁盘中，重启的时候可以再次加载进行使用;redis和memcached都是高性能的分布式缓存服务器，通过上述比较，考虑到如果重启服务器，memcached中的数据都会丢失，会影响用户的体验，所以使用redis存储session是比较好的方案。 ##三、redis存储session的php实现在我的上篇博客中，已经介绍了怎么安装redis服务器及phpredis扩展，具体请参考：http://blog.csdn.net/turtleo/article/details/499344971234567891011121314&lt;?phpini_set('session.gc_maxlifetime', 3600);ini_set('session.save_handler', \"redis\");ini_set(\"session.save_path\", \"tcp://127.0.0.1:6379\");session_start();$_SESSION['uid'] = \"2\";$_SESSION['username'] = \"turtle\";$redis = new Redis();$redis-&gt;connect('127.0.0.1', 6379);$user = $redis-&gt;get('PHPREDIS_SESSION:'.session_id()).'&lt;/br&gt;';echo $user;?&gt; 如果在配置文件中/etc/redis/6379.conf中开启了requirepass，这使用如下代码12345678910111213ini_set(&apos;session.gc_maxlifetime&apos;, 3600);ini_set(&apos;session.save_handler&apos;, &quot;redis&quot;);ini_set(&quot;session.save_path&quot;, &quot;tcp://127.0.0.1:6379?auth=password&quot;);session_start();$_SESSION[&apos;uid&apos;] = &quot;2&quot;;$_SESSION[&apos;username&apos;] = &quot;turtle&quot;;$redis = new Redis();$redis-&gt;connect(&apos;127.0.0.1&apos;, 6379);$redis-&gt;auth(&apos;turtletl.com&apos;);$user = $redis-&gt;get(&apos;PHPREDIS_SESSION:&apos;.session_id()).&apos;&lt;/br&gt;&apos;;echo $user;?&gt; 可以进行如下配置开启requirepass：1vim /etc/redis/6379.conf 具体配置文件依情况而定1requirepass 密码 重启redis服务器。","categories":[],"tags":[],"keywords":[]},{"title":"搭建NFS文件服务器","slug":"搭建NFS文件服务器","date":"2016-10-17T10:27:32.000Z","updated":"2016-10-17T10:28:17.947Z","comments":true,"path":"2016/10/17/搭建NFS文件服务器/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/搭建NFS文件服务器/","excerpt":"一、NFS简介NFS是Network File System的缩写，即网络文件系统。通过网络让不同的机器、不同的操作系统能够彼此分享个别的数据，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统见实现磁盘文件共享的一种方法。NFS在文件传送或信息传送过程中依赖RPC协议。RPC，远程过程调用，是能是客户端执行其他系统中程序的一种机制。在之前的博客中，使用过rsync+inotify的方式搭建过实时同步服务器，但发现这种方法同步效果并不是特别好。","text":"一、NFS简介NFS是Network File System的缩写，即网络文件系统。通过网络让不同的机器、不同的操作系统能够彼此分享个别的数据，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统见实现磁盘文件共享的一种方法。NFS在文件传送或信息传送过程中依赖RPC协议。RPC，远程过程调用，是能是客户端执行其他系统中程序的一种机制。在之前的博客中，使用过rsync+inotify的方式搭建过实时同步服务器，但发现这种方法同步效果并不是特别好。 二、安装NFS以下是基于Centos系统的1yum install nfs-utils 三、搭建NFS服务器1、将NFS server的/var/www/html共享给115.29.39.145网段，权限为读写。1vim /etc/exports 添加内容1/var/www/html 115.29.39.145(rw) 2、重启nfs服务器123systemctl restart rpcbindsystemctl restart nfsexportfs 3、nfs服务器端查看NFS的共享状态12showmount -eshowmount -a 4、客户端使用showmount命令查询NFS的共享状态1showmount -e 服务端ip 5、客户端挂载NFS服务器中的共享目录命令格式1mount NFS服务器IP:共享目录 本地挂载目录 查看是否挂载成功1mount | grep nfs 6、取消挂载1umount 本地目录 如果提示is busy，这使用如下命令取消挂载1umount -l 本地目录","categories":[],"tags":[],"keywords":[]},{"title":"centos服务器下配置nagios自动化运维工具","slug":"centos服务器下配置nagios自动化运维工具","date":"2016-10-17T10:25:48.000Z","updated":"2016-10-17T10:26:24.297Z","comments":true,"path":"2016/10/17/centos服务器下配置nagios自动化运维工具/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/centos服务器下配置nagios自动化运维工具/","excerpt":"Nagios是一款Linux上成熟的监视系统运行状态和网络信息的开源IT基础设施监视系统。Nagios能监视所指定的本地或远程主机服务，同时提供异常通知、事件处理等功能。与商业IT管理系统，如IBM Tivoli、HP OpenView/Operations等相比，Nagios具有成本低廉、结构简单、可维护性强等诸多优点，越来越受IT运维人员和系统管理员的青睐。","text":"Nagios是一款Linux上成熟的监视系统运行状态和网络信息的开源IT基础设施监视系统。Nagios能监视所指定的本地或远程主机服务，同时提供异常通知、事件处理等功能。与商业IT管理系统，如IBM Tivoli、HP OpenView/Operations等相比，Nagios具有成本低廉、结构简单、可维护性强等诸多优点，越来越受IT运维人员和系统管理员的青睐。本博客是基于Centos、apache环境搭建Nagios的。 ##一、安装Nagios1.安装前的准备(1)创建Nagios用户和用户组123useradd -s /sbin/nologin nagiosmkdir /usr/local/nagioschown -R nagios.nagios /usr/local/nagios (2)开启系统的sendmail服务在Nagios监控服务器上开启sendmail服务的作用是让Nagios在检测到故障时可以发送报警邮件。可以按如下需求配置sendmail服务12vim /etc/mail.rcset from=fromUser smtp=smtp服务器 smtp-auth-user=用户名 smtp-auth-password=密码 smtp-auth=login 2.安装Nagios1234567891011tar xvzf nagios-4.1.1.tar.gzcd nagios./configure --prefix=/usr/local/nagiosmake allmake installmake install-initmake install-commandmodemake install-configchkconfig --add nagioschkconfig --level 35 nagios onchkconfig --list nagios 3.安装Nagios插件Nagios提供的各种功能基本上是通过插件来完成的，而Nagios核心只提供了很少的监控功能。Nagios插件可以在www.nagios.org下载。12345tar xvzf nagios-plugins-2.1.1.tar.gzcd nagios-plugins-2.1.1./configure --prefix=/usr/local/nagiosmakemake install 4.配置apache1vim /etc/httpd/conf/httpd.conf 修改用户和用户组12User nagiosGroup nagios 找到DirectoryIndex index.html修改为12DirectoryIndex index.html index.phpAddType application/x-httpd-php .php 增加验证配置1234567891011121314151617181920212223242526#setting for nagiosScriptAlias /nagios/cgi-bin &quot;/usr/local/nagios/sbin&quot;&lt;Directory &quot;/usr/local/nagios/sbin&quot;&gt; AuthType Basic Options ExecCGI AllowOverride None Order allow,deny Allow from all AuthName &quot;nagios Access&quot; AuthUserFile /usr/local/nagios/etc/htpasswd Require valid-user&lt;/Directory&gt;Alias /nagios &quot;/usr/local/nagios/share&quot;&lt;Directory &quot;/usr/local/nagios/share&quot;&gt;AuthType Basic Options None AllowOverride None Order allow,deny Allow from all AuthName &quot;nagios Access&quot; AuthUserFile /usr/local/nagios/etc/htpasswd Require valid-user&lt;/Directory&gt; 创建Apache目录验证文件123htpasswd -c /usr/local/nagios/etc/htpasswd 用户名New password:(输入密码)Re-type new password:(确认密码) 重启Apache服务 ##二、配置Nagios(1)hosts.cfg文件此文件在默认情况下不存在，需要手动创建。hosts.cfg主要用来指定被监控的主机地址及相关属性信息。1234567891011121314151617181920212223define host &#123; use linux-server host_name web alias turtletl-web address 115.29.39.145&#125;define host &#123; use linux-server host_name turtletl alias turtletl.com address www.turtletl.com&#125;define hostgroup &#123; hostgroup_name sa-server alias sa server members web,turtletl&#125; 此文件创建了115.29.39.145和turtletl.com两个远程主机和一个主机组。（2）services.cfg文件此文件在默认情况下也不存在，需要创建。services.cfg文件主要用于定义监控服务和主机资源。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566########################### web #################################define service &#123; use local-service host_name web service_description PING check_command check_ping!100.0,20%!500.0,60%&#125;define service &#123; use local-service host_name web service_description SSH check_command check_ssh&#125;define service &#123; use local-service host_name web service_description SSHD check_command check_tcp!22&#125;define service &#123; use local-service host_name web service_description http check_command check_http&#125;########################### turtletl ############################define service &#123; use local-service host_name turtletl service_description PING check_command check_ping!100.0,20%!500.0,60%&#125;define service &#123; use local-service host_name turtletl service_description SSH check_command check_ssh&#125;define service &#123; use local-service host_name turtletl service_description SSHD check_command check_tcp!22&#125;define service &#123; use local-service host_name turtletl service_description http check_command check_http&#125; 这里对这两个主机设置了4个监控服务。（3）contacts.cfg文件contacts.cfg是一个定义联系人和联系人组的配置文件，当监护的主机或服务出现故障时，Nagios会通过指定的通知将信息发送给指定的联系人或使用者。1234567891011121314151617define contact&#123; contact_name turtle ; Short name of user use generic-contact ; Inherit default values from generic-contact template (defined above) alias turtle Admin; Full name of user email 邮箱 ; &lt;&lt;***** CHANGE THIS TO YOUR EMAIL ADDRESS ******&gt;&gt;&#125;# CONTACT GROUPS# We only have one contact in this simple configuration file, so there is# no need to create more than one contact group.define contactgroup&#123; contactgroup_name admins alias Nagios Administrators members turtle&#125; (4)cgi.cfg文件在cgi.cfg文件中添加此用户的执行权限就可以。12345678default_user_name=turtleauthorized_for_system_information=turtleauthorized_for_configuration_information=turtleauthorized_for_system_commands=turtleauthorized_for_all_services=turtleauthorized_for_all_hosts=turtleauthorized_for_all_service_commands=turtleauthorized_for_all_host_commands=turtle (6)nagios.cfg文件将上面添加的文件在nagios.cfg文件中配置123456cfg_file=/usr/local/nagios/etc/objects/hosts.cfgcfg_file=/usr/local/nagios/etc/objects/services.cfgcfg_file=/usr/local/nagios/etc/objects/commands.cfgcfg_file=/usr/local/nagios/etc/objects/contacts.cfgcfg_file=/usr/local/nagios/etc/objects/timeperiods.cfgcfg_file=/usr/local/nagios/etc/objects/templates.cfg ##三、Nagios的运行和维护1.验证Nagios配置文件的正确性1/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg 2.启动与停止Nagios(1）启动Nagios/usr/local/nagios/bin/nagios -d /usr/local/nagios/etc/nagios.cfg(2）关闭nagios1kill &lt;nagios_pid&gt; (3)重启nagios1kill -HUP &lt;nagios_pid&gt; ))","categories":[],"tags":[],"keywords":[]},{"title":"通过rsync工具搭建简单的远程容灾备份系统","slug":"通过rsync工具搭建简单的远程容灾备份系统","date":"2016-10-17T10:22:36.000Z","updated":"2016-10-17T10:23:00.444Z","comments":true,"path":"2016/10/17/通过rsync工具搭建简单的远程容灾备份系统/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/通过rsync工具搭建简单的远程容灾备份系统/","excerpt":"假定有两台服务器 A、B其中A系统作为网站服务器，B作为远程容灾备份机。远程容灾备份系统就是将A系统的数据通过守护进程定时备份到B服务器上，从而实现数据的远程容灾。","text":"假定有两台服务器 A、B其中A系统作为网站服务器，B作为远程容灾备份机。远程容灾备份系统就是将A系统的数据通过守护进程定时备份到B服务器上，从而实现数据的远程容灾。1、在A系统上配置rsync修改/etc/rsyncd.conf文件，配置内容如下：1234567891011121314151617181920212223242526272829303132333435# /etc/rsyncd: configuration file for rsync daemon mode# See rsyncd.conf man page for more options.# configuration example: uid = nobody gid = nobody use chroot = no max connections = 10 pid file = /var/run/rsyncd.pid lock file = /var/run/rsyncd.lock log file = /var/run/rsyncd.log# exclude = lost+found/# transfer logging = yes# timeout = 900# ignore nonreadable = yes# dont compress = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2# [ftp]# path = /home/ftp# comment = ftp export area[turtletl]path = 需要备份的目录comment = blog fileignore errorsread only = nowrite only = nohosts allow = *hosts deny = list = falseuid = rootgid = rootauth users = 用户名secrets file = /etc/server.pass 其中/etc/server.pass文件的内容如下：1用户名:密码 然后改变server.pass文件的权限1chmod 666 /etc/server.pass 2、启动rsync守护进程1rsync --daemon 3、在B系统上配置rsync在B系统上不需要做任何配置，只需在/etc下创建一个server.pass文件，内容为A系统中server.pass中的密码即可，并且改变权限为600，同时执行以下命令就可以完成手动备份：1rsync -vzrtopg --delete --progress --exclude &quot;*access*&quot; --exclude &quot;debug*&quot; 用户名@A服务器地址::A系统rsyncd.conf文件中的模块（如turtletl） 备份文件存放位置 --password-file /etc/server.pass 4、设置定时备份策略假定客户端rsync在每天凌晨3点30分执行镜像备份操作，在B服务器上执行“crontab -e”，然后添加如下信息即可：130 3 * * * rsync -vzrtopg --delete --progress --exclude &quot;*access*&quot; --exclude &quot;debug*&quot; 用户名@A服务器地址::A系统rsyncd.conf文件中的模块（如turtletl） 备份文件存放位置 --password-file /etc/server.pass 至此一个简单的远程容灾备份系统就算是搭建好了，但是这并不是一个完美的容灾方案。文章来源：http://www.turtletl.com","categories":[],"tags":[],"keywords":[]},{"title":"mysql导出为CSV的同时加上表头","slug":"mysql导出为CSV的同时加上表头","date":"2016-10-17T10:21:45.000Z","updated":"2016-10-17T10:22:05.784Z","comments":true,"path":"2016/10/17/mysql导出为CSV的同时加上表头/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/mysql导出为CSV的同时加上表头/","excerpt":"今天在使用mysql的into outfile命令将数据库数据导出为csv时，发现数据可以导出，但是列名却没有，但是却可以通过修改sql语句的方法加上表头，具体实现方法是在查找数据的时候并上列名：","text":"今天在使用mysql的into outfile命令将数据库数据导出为csv时，发现数据可以导出，但是列名却没有，但是却可以通过修改sql语句的方法加上表头，具体实现方法是在查找数据的时候并上列名：不带表头1select uid,nickname,realname,mobile,idcard from m order by m.uid desc into outfile &apos;/var/www/api/public/a/download/&quot;.$file_name.&quot;&apos; fields terminated by &apos;,&apos; optionally enclosed by &apos;\\&quot;&apos; escaped by &apos;\\&quot;&apos; lines terminated by &apos;\\r\\n&apos; 带上表头1select uid,nickname,realname,mobile,idcard from( select uid,nickname,realname,mobile,idcard from ims_mc_members union select &apos;uid&apos;,&apos;昵称&apos;,&apos;真实姓名&apos;,&apos;手机号&apos;, &apos;身份证号&apos;) m order by m.uid desc into outfile &apos;/var/www/api/public/a/download/&quot;.$file_name.&quot;&apos; fields terminated by &apos;,&apos; optionally enclosed by &apos;\\&quot;&apos; escaped by &apos;\\&quot;&apos; lines terminated by &apos;\\r\\n&apos; 文章来源：http://www.turtletl.com","categories":[],"tags":[],"keywords":[]},{"title":"解决Mysql ERROR 1 (HY000)问题","slug":"解决Mysql-ERROR-1-HY000-问题","date":"2016-10-17T10:20:46.000Z","updated":"2016-10-17T10:21:15.007Z","comments":true,"path":"2016/10/17/解决Mysql-ERROR-1-HY000-问题/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/解决Mysql-ERROR-1-HY000-问题/","excerpt":"今天在使用mysql语句的into outfile方法将Mysql导出为CSV时，出现ERROR 1 (HY000): Can’t create/write to file ‘/data/outfile.csv’ (Errcode: 13)问题，刚开始以为是读写权限问题，所以使用如下命令修改权限：","text":"今天在使用mysql语句的into outfile方法将Mysql导出为CSV时，出现ERROR 1 (HY000): Can’t create/write to file ‘/data/outfile.csv’ (Errcode: 13)问题，刚开始以为是读写权限问题，所以使用如下命令修改权限：1chmod 777 /data 然而发现并没有什么用，经查阅资料，发现要将文件所在目录加入到mysql用户组中，并成为mysql用户，所以使用如下命令修改目录所在的用户组：1chown mysql:mysql /data 本以为可以成功，然而问题还是依旧，没办法继续查阅资料，发现ubuntu服务器会限制mysql执行/usr/sbin/mysqld命令的执行，需要将这个目录加入到/etc/apparmor.d/usr.sbin.mysqld文件中，修改如下：12/data/ r, 添加要生成文件的路径/data/* rw, 添加要生成文件的路径 然后重启mysql服务器，重新执行命令，顺利写入，完成。文章来源：http://www.turtletl.com","categories":[],"tags":[],"keywords":[]},{"title":"解决数据库连接报ERROR 1045问题","slug":"解决数据库连接报ERROR-1045问题","date":"2016-10-17T10:19:15.000Z","updated":"2016-10-17T10:19:44.327Z","comments":true,"path":"2016/10/17/解决数据库连接报ERROR-1045问题/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/解决数据库连接报ERROR-1045问题/","excerpt":"今天在Centos服务器上安装mysql数据库，装完之后使用连接命令","text":"今天在Centos服务器上安装mysql数据库，装完之后使用连接命令1mysql -uroot -p 后，抛出如下命令1ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO) 以前也装过mysql数据库，默认密码都是为空的，现在安装完后，使用空密码也不行，经查阅资料，有如下解决办法：1、首先停止mysql进程1/etc/rc.d/init.d/mysqld stop 2、输入如下命令1mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp; 3、按回车进入下个命令行，然后连接数据库1mysql -u root mysql 4、进入到了mysql数据库中，使用如下命令修改数据库密码12update user set password=password(&apos;密码&apos;) where user=&apos;用户&apos;flush privileges 5、然后重启mysql数据库1systemctl start mysql 6、再以新密码登录数据库就可以解决问题了文章来源：http://www.turtletl.com","categories":[],"tags":[],"keywords":[]},{"title":"Centos下配置svn服务器","slug":"Centos下配置svn服务器","date":"2016-10-17T10:17:55.000Z","updated":"2016-10-17T10:18:17.164Z","comments":true,"path":"2016/10/17/Centos下配置svn服务器/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/Centos下配置svn服务器/","excerpt":"entos服务器下面配置SVN服务器首先的安装SVN，一般情况下，大多数服务器都安装了svn服务器，其实安装过程也很简单，接下来看看看看怎么配置svn服务器：","text":"entos服务器下面配置SVN服务器首先的安装SVN，一般情况下，大多数服务器都安装了svn服务器，其实安装过程也很简单，接下来看看看看怎么配置svn服务器：1、在/root/目录下新建一个目录svn：mkdir svn2、进入到svn目录，新建版本库：svnadmin create admin3、在admin目录下，配置用户组及用户、密码进入authz文件，配置用户组和用户12345[groups]用户组 = 用户1、用户2......[/]@用户组 = rw 或 r 或 w 或无 进入passd文件，配置用户密码12用户名 = 密码... 4、往版本库中导入内容1svn import /var/www/admin svn://www.turtletl.com/admin 5、进入/var/www目录，将刚刚建立的版本库check out下来1svn co svn://www.turtletl.com/admin 6、然后就可以在本地checkout和commit了","categories":[],"tags":[],"keywords":[]},{"title":"Memcached缓存服务器","slug":"Memcached缓存服务器","date":"2016-10-17T10:16:56.000Z","updated":"2016-10-17T10:17:15.104Z","comments":true,"path":"2016/10/17/Memcached缓存服务器/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/Memcached缓存服务器/","excerpt":"Memecached是一个免费开源的、高性能的、具有分布式内存对象的缓存系统，它通过减轻数据库负载加速动态web应用。","text":"Memecached是一个免费开源的、高性能的、具有分布式内存对象的缓存系统，它通过减轻数据库负载加速动态web应用。Memcached的特征：1、协议简单2、基于libevent的事件处理3、内置的内存管理系统4、互不通信的Memcached之间具有分布特征 ####安装Memcached####以centos为例：yum install memcached ####启动Memcached####memcached -m 32m -p 11211 -d -u root -P /avr/run/memcached.pid -c 256 -vv启动过程中所用的选项说明：-p 使用的TCP端口-m 最大内存大小-vv 以very vrebose模式启动，将调试信息和错误输出到控制台。-d 作为守护进程在后台运行-c 最大运行并发连接数-P 设置保存Memcached的pid文件-l 监听的服务器IP地址，如果有多个地址-u 运行Memcached的用户，默认不能有root用户启动，所以当用户为root时，需要利用-u参数来指定。 测试启动是否正常123456789101112131415[root@iZ284knd7ljZ /]# telnet localhost 11211Trying 127.0.0.1...Connected to localhost.Escape character is &apos;^&apos;&apos;.set test &apos;hello&apos; 0 10CLIENT_ERROR bad command line formatset test 0 0 10test_valueSTOREDget testVALUE test 0 10test_valueENDquitConnection closed by foreign host. ####关闭mecached####kill ‘cat /var/run/mecached.pid’ ####安装mecached的PHP扩展####已centos系统为例yum install php-pecl-memcache配置php.ini文件如果php.ini中没有extension=memcache.so扩展，添加该扩展。 ####测试memcache的扩展是否安装成功####12345678&lt;?php/*Memcached 缓存服务器 */$mem = New Memcache;$mem-&gt;connect('127.0.0.1', 11211);$mem-&gt;set('test', 'Hello world!', 0, 12);$val = $mem-&gt;get('test');echo $val;?&gt; 如果在浏览器输出Hello world则安装成功。","categories":[],"tags":[],"keywords":[]},{"title":"Nginx日志分割配置","slug":"Nginx日志分割配置","date":"2016-10-17T10:14:11.000Z","updated":"2016-10-17T10:15:17.957Z","comments":true,"path":"2016/10/17/Nginx日志分割配置/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/Nginx日志分割配置/","excerpt":"Nginx日志文件分割配置","text":"Nginx日志文件分割配置 12345678#/bin/bash savepath_log = 'home/nginx/logs'nglogs = '/opt/nginx/logs'mkdir -p $savepath_log/$(date +%Y)/$(date +%m)mv $nglogs/access.log $savepath_log/$(date +%Y)/$(date +%m)/access.$(date +%Y%m%d).logmv $nglogs/error.log $savepath_log/$(date +%Y)/$(date +%m)/error.$(date +%Y%m%d).logkill -USR1 'cate /opt/nginx/logs/nginx.pid 将这段脚本保存后加入到Linux的crontab守护进程（看crontab那篇博客），让此脚本定时执行，就可以实现日志的每天分割功能了。通过Nginx的信号“USER1”实现了日志的自动切换功能。’","categories":[],"tags":[],"keywords":[]},{"title":"Linux定时运行命令脚本的进程","slug":"Linux定时运行命令脚本的进程","date":"2016-10-17T10:12:37.000Z","updated":"2016-10-17T10:14:06.117Z","comments":true,"path":"2016/10/17/Linux定时运行命令脚本的进程/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/Linux定时运行命令脚本的进程/","excerpt":"一、cron的三个配置文件","text":"一、cron的三个配置文件 1、/etc/crontab1234567891011121314SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 2、/etc/cron.d 该目录下存放需要运行的脚本或文件。12345# Run the hourly jobsSHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root01 * * * * root run-parts /etc/cron.hourly 3、/var/spool该目录下存放的是用户创建的crontab任务。 二、权限crontab权限问题到/var/adm/cron/下一看，文件cron.allow和cron.deny是否存在用法如下：1、如果两个文件都不存在，则只有root用户才能使用crontab命令。2、如果cron.allow存在但cron.deny不存在，则只有列在cron.allow文件里的用户才能使用crontab命令，如果root用户也不在里面，则root用户也不能使用crontab。3、如果cron.allow不存在, cron.deny存在，则只有列在cron.deny文件里面的用户不能使用crontab命令，其它用户都能使用。4、如果两个文件都存在，则列在cron.allow文件中而且没有列在cron.deny中的用户可以使用crontab，如果两个文件中都有同一个用户，以cron.allow文件里面是否有该用户为准，如果cron.allow中有该用户，则可以使用crontab命令。 AIX 中 普通用户默认都有 crontab 权限，如果要限制用户使用 crontab ,就需要编辑/var/adm/cron/cron.denyHP-UNIX 中默认普通用户没得crontab 权限 ，要想放开普通用户的crontab 权限可以编 三、 创建cron脚本第一步：写cron脚本文件,命名为crontest.cron。15,30,45,59 echo “xgmtest…..” &gt;&gt; xgmtest.txt 表示，每隔15分钟，执行打印一次命令第二步：添加定时任务。执行命令 “crontab crontest.cron”。搞定第三步：”crontab -l” 查看定时任务是否成功或者检测/var/spool/cron下是否生成对应cron脚本","categories":[],"tags":[],"keywords":[]},{"title":"选择Nginx的优势","slug":"选择Nginx的优势","date":"2016-10-17T10:11:28.000Z","updated":"2016-10-17T10:12:29.324Z","comments":true,"path":"2016/10/17/选择Nginx的优势/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/选择Nginx的优势/","excerpt":"1、作为Web服务器，Nginx处理静态文件、索引文件，自动索引的效率非常高。 2、作为代理服务器，Nginx可以实现无缓存的反向代理加速，提高网站运行速度。","text":"1、作为Web服务器，Nginx处理静态文件、索引文件，自动索引的效率非常高。 2、作为代理服务器，Nginx可以实现无缓存的反向代理加速，提高网站运行速度。 3、作为负载均衡服务器，Nginx既可以在内部直接Rails和PHP，也可以支持HTTP大力服务器对外进行服务，同时还支持简单的容错和利用算法进行负载均衡。 4、在性能方面，Nginx是专门为性能优化而开发的，在实现上非常注重效率。他采用内核Poll模型，可以支持更多的并发连接，最大可以支持对50000个并发连接的响应，而且占用很顶的内存资源。 5、在稳定性方面，Nginx采取了分阶段资源分配技术，使得CPU与内存的占用率非常低。Nginx官方表示，Nginx保持10000个没有活动的连接，而这些连接只占用2.5MB的内存，因此，类似DOS这样的攻击对Nginx来说基本上是没有任何作用的。​ 6、在高可用性方面，Nginx支持热部署，启动速递特别迅速，因此可以在不间断服务的情况下，对软件版本或者配置进行升级，即使运行数月也无需重新启动，几乎可以做到7×24小时不间断地运行。​","categories":[],"tags":[],"keywords":[]},{"title":"改变Nginx的默认目录为/var/www","slug":"改变Nginx的默认目录为-var-www","date":"2016-10-17T10:10:41.000Z","updated":"2016-10-17T10:11:22.767Z","comments":true,"path":"2016/10/17/改变Nginx的默认目录为-var-www/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/改变Nginx的默认目录为-var-www/","excerpt":"今天刚接触nginx服务器，发现它太强大了，但是它的默认目录不是/var/www，用惯了Apache服务器，所以想把Nginx的根目录迁移到/var/www下，尝试了一番，可做如下配置：1、进入/etc/aginx/conf/vhosts目录，编辑default.conf文件下的root对应的值，将网站根目录改成你想要的目录。2、保存，使用kill -HUP 主进程号 命令平滑重启nginx服务器，然后打开浏览器，你会发现出现 403 FORBIDDEN 错误，解决办法是将你想要的网站根目录加入到www:www用户组。","text":"今天刚接触nginx服务器，发现它太强大了，但是它的默认目录不是/var/www，用惯了Apache服务器，所以想把Nginx的根目录迁移到/var/www下，尝试了一番，可做如下配置：1、进入/etc/aginx/conf/vhosts目录，编辑default.conf文件下的root对应的值，将网站根目录改成你想要的目录。2、保存，使用kill -HUP 主进程号 命令平滑重启nginx服务器，然后打开浏览器，你会发现出现 403 FORBIDDEN 错误，解决办法是将你想要的网站根目录加入到www:www用户组。 Nginx服务器一些常用的命令： Nginx -v 查看版本号 Nginx -V 查看版本号及相关编译信息 Nginx -t 检测配置文件是否正确 Nginx -t -c 配置文件目录 检测指定配置文件是否正确 kill -HUP 主进程号 平滑重启nginx服务器 ​","categories":[],"tags":[],"keywords":[]},{"title":"Nginx负载均衡配置","slug":"Nginx负载均衡配置","date":"2016-10-17T10:08:50.000Z","updated":"2016-10-17T10:10:12.574Z","comments":true,"path":"2016/10/17/Nginx负载均衡配置/","link":"","permalink":"http://blog.turtletl.com/2016/10/17/Nginx负载均衡配置/","excerpt":"对于一个大型网站来说，负载均衡是永恒的话题，负载均衡，顾名思义，即使将负载分摊到不同的服务单元，既可以保证服务的可用性，又可以保证响应足够快，给用户很好的体验。nginx负载均衡软件是目前大受欢迎的软件之一。下面通过Nginx的反向代理功能配置一个Nginx负载均衡服务器。","text":"对于一个大型网站来说，负载均衡是永恒的话题，负载均衡，顾名思义，即使将负载分摊到不同的服务单元，既可以保证服务的可用性，又可以保证响应足够快，给用户很好的体验。nginx负载均衡软件是目前大受欢迎的软件之一。下面通过Nginx的反向代理功能配置一个Nginx负载均衡服务器。 在/etc/nginx/conf/目录下新建一个配置文件http_proxy.conf，内容如下 1234567upstream myserver &#123; server 需要代理的服务器地址或域名 weight=3 max_fails=3 fail_timeout=20s;​ ......&#125;​ 在上面定义的负载均衡组myserver中，组名可以根据需要随便取。 在/etc/nginx/conf/vhosts/目录下配置default.conf文件，内容如下：12345678910111213141516171819server &#123; listen 80; server_name www.domain.com ip地址; index index.html index.htm index.php;​ root 网站目录location / &#123; proxy_pass http://myserver; proxy_next_upstream http_500 http_502 http_503 error timeout invalid_header;​ include /alidata/server/nginx/conf/proxy.conf;​&#125;​ proxy_next_upstream 用来定义故障转移策略，当后端服务节点返回500、502、503、504和执行超时等错误时，自动将请求转发到updtream负载均衡组中的另一台服务器，实现故障转移。 proxy.conf内容如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071Nginx负载均衡配置编辑删除转载2015-10-25 15:01:28标签：linux服务器nginx 对于一个大型网站来说，负载均衡是永恒的话题，负载均衡，顾名思义，即使将负载分摊到不同的服务单元，既可以保证服务的可用性，又可以保证响应足够快，给用户很好的体验。nginx负载均衡软件是目前大受欢迎的软件之一。下面通过Nginx的反向代理功能配置一个Nginx负载均衡服务器。1、在/etc/nginx/conf/目录下新建一个配置文件http_proxy.conf，内容如下：upstream myserver &#123; server 需要代理的服务器地址或域名 weight=3 max_fails=3 fail_timeout=20s;​ ......&#125;​ 在上面定义的负载均衡组myserver中，组名可以根据需要随便取。2、在/etc/nginx/conf/vhosts/目录下配置default.conf文件，内容如下：server &#123; listen 80; server_name www.domain.com ip地址; index index.html index.htm index.php;​ root 网站目录location / &#123; proxy_pass http://myserver; proxy_next_upstream http_500 http_502 http_503 error timeout invalid_header;​ include /alidata/server/nginx/conf/proxy.conf;​&#125;​proxy_next_upstream 用来定义故障转移策略，当后端服务节点返回500、502、503、504和执行超时等错误时，自动将请求转发到updtream负载均衡组中的另一台服务器，实现故障转移。proxy.conf内容如下：​proxy_redirect off;proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;client_body_buffer_size 128k;proxy_connect_timeout 90;proxy_send_timeout 90;proxy_read_timeout 90;proxy_buffer_size 4k;proxy_buffers 4 32k;proxy_busy_buffers_size 64k;proxy_temp_file_write_size 64k; proxy_set_header: 设置由后端的服务器获取用户的主机名或真实的IP地址，以及代理者真是IP地址。 client_body_buffer_size:用于指定客户端请求主体缓存大小。，可以理解为先保存到本地在传给用户。 proxy_connect_timeout: 表示与后端服务器连接的超时时间，即发起握手等候响应的超时时间。 proxy_send_timeout: 表示于后端服务器数据回传时间，即规定时间组织内后端服务器必须穿万所有数据，否则，Nginx将断口开这个连接。 ​proxy_read_timeout:设置Nginx从代理的后端服务器获取信息的时间 proxy_bufferr_size:设置缓冲区大小。 proxy_buffers:设置缓冲区的数量和大小。 proxy_busy_buffer_size:用于设置系统很忙时可以使用的proxy_buffers大小。 proxy_temp_file_write-sizeL指定proxy缓存临时文件的大小。​","categories":[],"tags":[],"keywords":[]}]}